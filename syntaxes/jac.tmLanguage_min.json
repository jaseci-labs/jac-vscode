{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "The Jac Programming Language",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"include": "#py_style_comment"
				},
				{
					"include": "#js_style_comment"
				},
				{
					"include": "#c_style_block_comment"
				}
			]
		},
		"py_style_comment": {
			"name": "comment.line.number-sign.jac",
			"begin": "(\\#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.jac"
				}
			},
			"end": "($)",
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"js_style_comment": {
			"name": "comment.line.double-slash.jac",
			"begin": "(\\/\\/)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.jac"
				}
			},
			"end": "(?=\\n)",
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"c_style_block_comment": {
			"name": "comment.block.jac",
			"begin": "(\\/\\*)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.begin.jac"
				}
			},
			"end": "(\\*\\/)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.comment.end.jac"
				}
			},
			"patterns": [
				{
					"include": "#codetags"
				}
			]
		},
		"codetags": {
			"match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
			"captures": {
				"1": {
					"name": "keyword.codetag.notation.jac"
				}
			}
		},
		"keywords": {
			"patterns": [
				{
					"name": "storage.modifier.jac",
					"match": "\\b(priv|prot|pub|has)\\b"
				},
				{
					"match": "\\b(str|int|float|list|tuple|set|dict|bool|bytes|any|type)\\b",
					"name": "support.type.jac"
				},
				{
					"match": ":h:|:here:|:v:|:visitor:",
					"name": "variable.language.special.jac"
				},
				{
					"match": "(\\b(object|node|edge|walker|global)\\b)|:w:|:walker:|:n:|:node:|:e:|:edge:|:o:|:object:|:g:|:global:",
					"name": "storage.type.class.jac"
				},
				{
					"match": "(\\b(can|test)\\b)|:a:|:ability:",
					"name": "storage.type.function.jac"
				},
				{
					"name": "keyword.control.jac",
					"match": "\\b(if|elif|else|for|to|by|while|continue|break|disengage|yield|skip|try|except|finally|raise|spawn|ignore|visit|revisit|with|entry|exit|assert)\\b"
				},
				{
					"name": "keyword.other.jac",
					"match": "\\b(as|async|sync|report|and|or|in|is|report|del|not)\\b"
				},
				{
					"name": "keyword.control.import.jac",
					"match": "\\b(import|include|from)\\b"
				},
				{
					"match": "\\b(None|True|False)\\b",
					"name": "constant.language.jac"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(?:([a-zA-Z$_][\\w$]*)?\\s+|(?<![\\w$]))(and=|or=)",
					"captures": {
						"1": {
							"name": "variable.assignment.jac"
						},
						"2": {
							"name": "keyword.operator.assignment.compound.jac"
						}
					}
				},
				{
					"match": "([a-zA-Z$_][\\w$]*)?\\s*(%=|\\+=|-=|\\*=|&&=|\\|\\|=|\\?=|(?<!\\()/=)",
					"captures": {
						"1": {
							"name": "variable.assignment.jac"
						},
						"2": {
							"name": "keyword.operator.assignment.compound.jac"
						}
					}
				},
				{
					"match": "([a-zA-Z$_][\\w$]*)?\\s*(&=|\\^=|<<=|>>=|>>>=|\\|=)",
					"captures": {
						"1": {
							"name": "variable.assignment.coffee"
						},
						"2": {
							"name": "keyword.operator.assignment.compound.bitwise.jac"
						}
					}
				},
				{
					"match": "<<|>>>|>>",
					"name": "keyword.operator.bitwise.shift.jac"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.jac"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.jac"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.bitwise.jac"
				},
				{
					"match": "([a-zA-Z$_][\\w$]*)?\\s*(=|:(?!:))(?![>=])",
					"captures": {
						"1": {
							"name": "variable.assignment.jac"
						},
						"2": {
							"name": "keyword.operator.assignment.jac"
						}
					}
				},
				{
					"match": "--",
					"name": "keyword.operator.decrement.jac"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.jac"
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.operator.splat.jac"
				},
				{
					"match": "\\?",
					"name": "keyword.operator.existential.jac"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.jac"
				},
				{
					"match": "(?x)\n\\b(?<![\\.\\$])\n(?:\n  (and|or|not) # logical\n  |\n  (is|isn't) # comparison\n)\n(?!\\s*:)\\b",
					"captures": {
						"1": {
							"name": "keyword.operator.logical.jac"
						},
						"2": {
							"name": "keyword.operator.comparison.jac"
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"include": "#double_quote"
				},
				{
					"include": "#single_quote"
				}
			]
		},
		"double_quote": {
			"name": "string.quoted.double.jac",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.jac",
					"match": "\\\\."
				}
			]
		},
		"single_quote": {
			"name": "string.quoted.single.jac",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.jac",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.jac"
}